<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Whitepaper Tech Blog - AI, 画像処理</title><link href="https://tech.wpaper-inc.com/" rel="alternate"></link><link href="https://tech.wpaper-inc.com/feeds/ai-hua-xiang-chu-li.atom.xml" rel="self"></link><id>https://tech.wpaper-inc.com/</id><updated>2020-01-09T00:00:00+09:00</updated><entry><title>JeVois Tutorial(2) - JeVoisでOpenCVのコーナー検出(C++)を実行</title><link href="https://tech.wpaper-inc.com/JeVois-Tutorial-2.html" rel="alternate"></link><published>2020-01-09T00:00:00+09:00</published><updated>2020-01-09T00:00:00+09:00</updated><author><name>Kousuke Takeuchi</name></author><id>tag:tech.wpaper-inc.com,2020-01-09:/JeVois-Tutorial-2.html</id><summary type="html">&lt;p&gt;サンプルコードではOpenCVが使用されていませんでしたが、jevois-sdkをインストールする際にOpenCV(4.0)パッケージも一緒にインストールされています。OpenCVの画像処理モジュールはそのまま使えますが、jevoisのモジュールから取得した画像をOpenCVで取り扱えるように変換する必要があることに注意しながら、コーナー検出のプログラムを書いていきますHeader_Cover: images/20200106_jevois-header.jpg&lt;/p&gt;</summary><content type="html">&lt;h2&gt;1. HelloJeVoisのサンプルプログラム&lt;/h2&gt;
&lt;p&gt;前回はC++の開発環境を構築しました。その後、カメラ画像に「Hello World」を表示するモジュールを実行しました。&lt;/p&gt;
&lt;p&gt;モジュールのプログラム本体は&lt;code&gt;src/Modules/HelloJeVois/HelloJeVois.C&lt;/code&gt;です。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;jevois/Core/Module.H&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
 &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;jevois/Image/RawImageOps.H&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

 &lt;span class="c1"&gt;// icon by Catalin Fertu in cinema at flaticon&lt;/span&gt;

 &lt;span class="c1"&gt;//! JeVois sample module&lt;/span&gt;
 &lt;span class="cm"&gt;/*! This module is provided as an example of how to create a new standalone module.&lt;/span&gt;

&lt;span class="cm"&gt;     JeVois provides helper scripts and files to assist you in programming new modules, following two basic formats:&lt;/span&gt;

&lt;span class="cm"&gt;     - if you wish to only create a single module that will execute a specific function, or a collection of such modules&lt;/span&gt;
&lt;span class="cm"&gt;       where there is no shared code between the modules (i.e., each module does things that do not relate to the other&lt;/span&gt;
&lt;span class="cm"&gt;       modules), use the skeleton provided by this sample module. Here, all the code for the sample module is compiled&lt;/span&gt;
&lt;span class="cm"&gt;       into a single shared object (.so) file that is loaded by the JeVois engine when the corresponding video output&lt;/span&gt;
&lt;span class="cm"&gt;       format is selected by the host computer.&lt;/span&gt;

&lt;span class="cm"&gt;     - if you are planning to write a collection of modules with some shared algorithms among several of the modules, it&lt;/span&gt;
&lt;span class="cm"&gt;       is better to first create machine vision Components that implement the algorithms that are shared among several of&lt;/span&gt;
&lt;span class="cm"&gt;       your modules. You would then compile all your components into a first shared library (.so) file, and then compile&lt;/span&gt;
&lt;span class="cm"&gt;       each module into its own shared object (.so) file that depends on and automatically loads your shared library file&lt;/span&gt;
&lt;span class="cm"&gt;       when it is selected by the host computer. The jevoisbase library and collection of components and modules is an&lt;/span&gt;
&lt;span class="cm"&gt;       example for how to achieve that, where libjevoisbase.so contains code for Saliency, ObjectRecognition, etc&lt;/span&gt;
&lt;span class="cm"&gt;       components that are used in several modules, and each module&amp;#39;s .so file contains only the code specific to that&lt;/span&gt;
&lt;span class="cm"&gt;       module.&lt;/span&gt;

&lt;span class="cm"&gt;     @author Sample Author&lt;/span&gt;

&lt;span class="cm"&gt;     @videomapping YUYV 640 480 28.5 YUYV 640 480 28.5 SampleVendor HelloJeVois&lt;/span&gt;
&lt;span class="cm"&gt;     @email sampleemail\@samplecompany.com&lt;/span&gt;
&lt;span class="cm"&gt;     @address 123 First Street, Los Angeles, CA 90012&lt;/span&gt;
&lt;span class="cm"&gt;     @copyright Copyright (C) 2017 by Sample Author&lt;/span&gt;
&lt;span class="cm"&gt;     @mainurl http://samplecompany.com&lt;/span&gt;
&lt;span class="cm"&gt;     @supporturl http://samplecompany.com/support&lt;/span&gt;
&lt;span class="cm"&gt;     @otherurl http://samplecompany.com/about&lt;/span&gt;
&lt;span class="cm"&gt;     @license GPL v3&lt;/span&gt;
&lt;span class="cm"&gt;     @distribution Unrestricted&lt;/span&gt;
&lt;span class="cm"&gt;     @restrictions None */&lt;/span&gt;
 &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloJeVois&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
     &lt;span class="c1"&gt;//! Default base class constructor ok&lt;/span&gt;
     &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="c1"&gt;//! Virtual destructor for safe inheritance&lt;/span&gt;
     &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;HelloJeVois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="c1"&gt;//! Processing function&lt;/span&gt;
     &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;InputFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OutputFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;
     &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// Wait for next available camera image:&lt;/span&gt;
       &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RawImage&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="c1"&gt;// We only support YUYV pixels in this example, any resolution:&lt;/span&gt;
       &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4L2_PIX_FMT_YUYV&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="c1"&gt;// Wait for an image from our gadget driver into which we will put our results:&lt;/span&gt;
       &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RawImage&lt;/span&gt; &lt;span class="n"&gt;outimg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

       &lt;span class="c1"&gt;// Enforce that the input and output formats and image sizes match:&lt;/span&gt;
       &lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="c1"&gt;// Just copy the pixel data over:&lt;/span&gt;
       &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixelsw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

       &lt;span class="c1"&gt;// Print a text message:&lt;/span&gt;
       &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rawimage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello JeVois!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;yuyv&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rawimage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Font20x38&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

       &lt;span class="c1"&gt;// Let camera know we are done processing the input image:&lt;/span&gt;
       &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// NOTE: optional here, inframe destructor would call it anyway&lt;/span&gt;

       &lt;span class="c1"&gt;// Send the output image with our processing results to the host over USB:&lt;/span&gt;
       &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// NOTE: optional here, outframe destructor would call it anyway&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

 &lt;span class="c1"&gt;// Allow the module to be loaded as a shared object (.so) file:&lt;/span&gt;
 &lt;span class="n"&gt;JEVOIS_REGISTER_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HelloJeVois&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;不要なコメントを省いて解説すると、プログラムの上から。。。&lt;/p&gt;
&lt;p&gt;まずは、jevoisカメラからの画像取得や操作に必要なライブラリをインポートします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;jevois/Core/Module.H&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
 &lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;jevois/Image/RawImageOps.H&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続いて、動画像処理のためのクラスを定義します。定義したクラスを&lt;code&gt;JEVOIS_REGISTER_MODULE(&amp;lt;class_name\&amp;gt;)&lt;/code&gt;でJeVoisで登録すると、カメラ画像をこのクラスで定義した関数で処理するようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloJeVois&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;# ... 関数の定義&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;JEVOIS_REGISTER_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HelloJeVois&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;HelloJevoisクラスには、3つのpublic関数が定義されています。まずは共有コンストラクター/デコンストラクタです。この二つは特別なセットアップとシャットダウンをしない限りは使用することはなさそうです。&lt;/p&gt;
&lt;p&gt;メインで記述するのが、&lt;code&gt;virtual void process&lt;/code&gt;です。processには「&lt;code&gt;inframe&lt;/code&gt;」と「&lt;code&gt;outframe&lt;/code&gt;」が引数で指定されています。&lt;code&gt;inframe&lt;/code&gt;には、JeVoisのファームが自動的に撮影した画像を指定してくれて、&lt;code&gt;outframe&lt;/code&gt;には、自分で処理した画像を指定する必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;InputFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OutputFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cp"&gt;# ...ここに画像の処理内容を記述&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続いて、主に使用するクラスモジュールですが、ここでは&lt;code&gt;jevois::InputFrame&lt;/code&gt;, &lt;code&gt;`jevois::InputFrame&lt;/code&gt;, &lt;code&gt;jevois::RawImage&lt;/code&gt;と&lt;code&gt;jevois::rawimage&lt;/code&gt;モジュールになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;InputFrame/OutputFrame&lt;/code&gt;は、カメラから動画を取得したり、USB経由で配信する動画を設定するモジュールです。デバイスと画像データの橋渡しをするだけです。&lt;/p&gt;
&lt;p&gt;主に操作するのが&lt;code&gt;jevois::RawImage&lt;/code&gt;で、InputFrameから取得した画像データになります。OpenCVにおける&lt;code&gt;cv::Mat&lt;/code&gt;クラスのようなもので、画像のピクセルデータと、画像のサイズやチャンネルデータを格納するクラスになります。&lt;/p&gt;
&lt;p&gt;そして、画像に文字を描画したり操作するモジュールが、&lt;code&gt;jevois::rawimage&lt;/code&gt;モジュールになります。いろいろ操作関数が定義されています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RawImage&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4L2_PIX_FMT_YUYV&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RawImage&lt;/span&gt; &lt;span class="n"&gt;outimg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずは、&lt;a href="http://jevois.org/doc/classjevois_1_1InputFrame.html#a3300ed6b18c5b5488cf062a5b45c3b56"&gt;&lt;code&gt;InputFrame::get()&lt;/code&gt;&lt;/a&gt;でカメラ画像を取得します。取得した画像は&lt;code&gt;RawImage&lt;/code&gt;クラスとして返されます。続いて&lt;a href="http://jevois.org/doc/classjevois_1_1RawImage.html#aacde26c84586c08d1e913694670d2d8e"&gt;&lt;code&gt;RawImage::require()&lt;/code&gt;&lt;/a&gt;を呼び出していますが、JeVoisはvideomappingでモジュールに関係なくカメラ画像の解像度やピクセルフォーマットを変更することができるので、モジュール側で制限が必要な場合はrequire関数で制限を設定します。今回は解像度は何でもいいので、inimgのサイズをそのまま使っています。また、ピクセルフォーマットは&lt;code&gt;YUYV&lt;/code&gt;を指定します。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;OutputFrame&lt;/code&gt;でも同様に、出力する画像を取得します。ここで、取得しているのは画像配列へのポインタであって、配列にはまだ画像データが設定されていないことに注意してください。このポインタに対して画像を設定することで、USB経由で処理画像が送信されます。&lt;/p&gt;
&lt;p&gt;さらに、&lt;code&gt;outimg.require&lt;/code&gt;では、ピクセルフォーマットを&lt;code&gt;inimg.fmt&lt;/code&gt;に設定しています。入力画像と同じYUYVになるように画像処理をしないといけないです。&lt;/p&gt;
&lt;p&gt;続いて、出力画像に処理を加えていきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixelsw&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pixels&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()));&lt;/span&gt;

&lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rawimage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;writeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello JeVois!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;230&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;yuyv&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;White&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rawimage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Font20x38&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずはmemcopyで、&lt;code&gt;inimg&lt;/code&gt;の画像データをそのまま出力画像&lt;code&gt;outimg&lt;/code&gt;に設定します。&lt;/p&gt;
&lt;p&gt;その後、&lt;code&gt;rawimage::writeText&lt;/code&gt;で、&lt;code&gt;outimg&lt;/code&gt;に文字を描画します。引数の詳細は&lt;a href="http://jevois.org/doc/group__image.html#ga893e982b449643c8853afe424fb72c09"&gt;こちら&lt;/a&gt;にありますが、やっていることは描画する座標とフォント、色の設定くらいです。OpenCVほど高機能にはなっていないみたいです。&lt;/p&gt;
&lt;p&gt;最後に、&lt;code&gt;inframe.done()&lt;/code&gt;と&lt;code&gt;outframe.send()&lt;/code&gt;を呼び出します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// NOTE: optional here, inframe destructor would call it anyway&lt;/span&gt;
&lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://jevois.org/doc/classjevois_1_1InputFrame.html#a3ad6ba7b0e66fefb8e43944ca4e90bcf"&gt;&lt;code&gt;InputFrame::done()&lt;/code&gt;&lt;/a&gt;は、カメラ画像のフレーム取得を終了する関数ですが、ドキュメントには&lt;code&gt;InputFrame::get()&lt;/code&gt;を呼び出したらすぐにdoneを実行してくれと書いてあります。ただし、コメントにもある通り、呼び出さなくてもデコンストラクタで必ず実行されるらしいです。InFrame::getをしたらすぐにdoneを呼び出すのが賢明そうです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jevois.org/doc/classjevois_1_1OutputFrame.html#ae6dafb6fab88b4166dc4b206c21c56a8"&gt;&lt;code&gt;OutputFrame::send()&lt;/code&gt;&lt;/a&gt;でUSB経由で処理画像データの送信を開始します。&lt;/p&gt;
&lt;h2&gt;2. OpenCVでコーナー検出&lt;/h2&gt;
&lt;p&gt;サンプルコードではOpenCVが使用されていませんでしたが、&lt;code&gt;jevois-sdk&lt;/code&gt;をインストールする際にOpenCV(4.0)パッケージも一緒にインストールされています。&lt;/p&gt;
&lt;p&gt;OpenCVの画像処理モジュールはそのまま使えますが、jevoisのモジュールから取得した画像をOpenCVで取り扱えるように変換する必要があることに注意しながら、コーナー検出のプログラムを書いていきます。&lt;/p&gt;
&lt;p&gt;まずは、opencvのライブラリをインポートして、共通クラスを書いていきます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;jevois/Core/Module.H&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;jevois/Image/RawImageOps.H&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    @author Whitepaper&lt;/span&gt;

&lt;span class="cm"&gt;    @videomapping YUYV 640 480 28.5 YUYV 640 480 28.5 SampleVendor HelloJeVois&lt;/span&gt;
&lt;span class="cm"&gt;    @copyright Copyright (C) 2020 by Whitepaper&lt;/span&gt;
&lt;span class="cm"&gt;    @distribution Unrestricted&lt;/span&gt;
&lt;span class="cm"&gt;    @restrictions None */&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HelloJeVois&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Module&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;HelloJeVois&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;InputFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;OutputFrame&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RawImage&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4L2_PIX_FMT_YUYV&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;RawImage&lt;/span&gt; &lt;span class="n"&gt;outimg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="cp"&gt;# ... ここに検出ロジックを記述&lt;/span&gt;

      &lt;span class="n"&gt;inframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="n"&gt;outframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;JEVOIS_REGISTER_MODULE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HelloJeVois&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続いて、jevoisのモジュールから取得した画像を&lt;code&gt;cv::Mat&lt;/code&gt;に変換するためには、&lt;a href="http://jevois.org/doc/namespacejevois_1_1rawimage.html"&gt;&lt;code&gt;jevois::rawimage::convertToCvBGR()&lt;/code&gt;&lt;/a&gt;を使用します。グレースケールに変換して画像を取得するには、&lt;code&gt;jevois::rawimage::convertToCvGray()&lt;/code&gt;を呼び出します。&lt;/p&gt;
&lt;p&gt;OpenCVのコーナー検出は、グレースケールの画像を使用するため、以下のように書きます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// グレースケールと標準化&lt;/span&gt;
&lt;span class="n"&gt;Mat&lt;/span&gt; &lt;span class="n"&gt;grayImg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rawimage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;convertToCvGray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inimg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grayImg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grayImg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NORM_MINMAX&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで、&lt;code&gt;jevois::RawImage&lt;/code&gt;を&lt;code&gt;cv::Mat&lt;/code&gt;に変換できました。あとはOpenCVでコーナー検出を行います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// コーナーの検出&lt;/span&gt;
&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Point2f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;corners&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;goodFeaturesToTrack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grayImg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;corners&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Point2f&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="n"&gt;it_corner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;corners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(;&lt;/span&gt; &lt;span class="n"&gt;it_corner&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;corners&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;it_corner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;rawimage&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;drawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outimg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it_corner&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it_corner&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jevois&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;yuyv&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;LightGreen&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;cv::goodFeaturesToTrack&lt;/code&gt;でコーナーを検出し、corners配列に格納しています。最後に検出したコーナーをforループで取り出し、&lt;code&gt;outimg&lt;/code&gt;に描画しています。描画は&lt;code&gt;jevois::RawImage&lt;/code&gt;にするため、&lt;a href="http://jevois.org/doc/group__image.html#gae7d102e1c456f87337d66a9a2fc11a58"&gt;&lt;code&gt;jevois::rawimage::drawCircle&lt;/code&gt;&lt;/a&gt;関数を呼び出しています。&lt;/p&gt;
&lt;p&gt;プログラムが書ければ、再度ビルドして実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./rebuild-platform.sh --live
$ guvcview
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行の結果、JeVoisでコーナー検出ができました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="20200109_screenshot1.png" src="images/20200109_screenshot1.png"&gt;&lt;/p&gt;</content><category term="AI, 画像処理"></category><category term="エッジコンピューティング"></category><category term="画像処理"></category><category term="JeVois"></category></entry><entry><title>JeVois Tutorial(1) Ubuntu18.04でJeVois開発環境作成と、サンプルコードをコマンドラインから実行</title><link href="https://tech.wpaper-inc.com/JeVois-Tutorial-1.html" rel="alternate"></link><published>2020-01-06T00:00:00+09:00</published><updated>2020-01-06T00:00:00+09:00</updated><author><name>Kousuke Takeuchi</name></author><id>tag:tech.wpaper-inc.com,2020-01-06:/JeVois-Tutorial-1.html</id><summary type="html">&lt;p&gt;jevoisのC++開発環境を作成するために行ったことのメモ。もともとJeVoisで顔の特徴量を分析し、USBシリアル経由でホストマシンに送信するために、チュートリアルを読み漁っていたら、JeVoisに関する日本語のまとまった記事がなかったため、細かくメモを取ることにした。JevoisのプログラミングチュートリアルはこちらにC++開発環境の構築手順が載っていた。ただしすでに環境をビルド済みのVirtualboxコンテナの配布とインストール方法だけしか説明されておらず、中に何がインストールされているか分からないのは気持ちが悪いので、マニュアルで環境構築を行った。&lt;/p&gt;</summary><content type="html">&lt;p&gt;jevoisのC++開発環境を作成するために行ったことのメモ&lt;/p&gt;
&lt;p&gt;もともとJeVoisで顔の特徴量を分析し、USBシリアル経由でホストマシンに送信するために、チュートリアルを読み漁っていたら、JeVoisに関する日本語のまとまった記事がなかったため、細かくメモを取ることにした。&lt;/p&gt;
&lt;p&gt;Jevoisのプログラミングチュートリアルは&lt;a href="http://jevois.org/tutorials/ProgrammerTutorials.html"&gt;こちら&lt;/a&gt;に掲載されており、&lt;a href="http://jevois.org/tutorials/ProgrammerVbox.html"&gt;Using the pre-installed jevois-sdk VirtualBox for development&lt;/a&gt;にC++開発環境の構築手順が載っていた。ただしすでに環境をビルド済みのVirtualboxコンテナの配布とインストール方法だけしか説明されておらず、中に何がインストールされているか分からないのは気持ちが悪いので、マニュアルで環境構築を行った。&lt;/p&gt;
&lt;p&gt;マニュアルで環境を構築するために、&lt;a href="https://jevois.usc.edu/"&gt;こちらのページ&lt;/a&gt;を参考にした。&lt;/p&gt;
&lt;p&gt;http://jevois.org/doc/Virtualbox.html&lt;/p&gt;
&lt;h2&gt;1. VirtualboxでUbuntuの立ち上げ&lt;/h2&gt;
&lt;p&gt;使用したバージョンは以下の通り&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 Pro (1909)&lt;/li&gt;
&lt;li&gt;Virtualbox 6.1.0&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ubuntulinux.jp/News/ubuntu1804-ja-remix"&gt;Ubuntu 18.04 (bionic) Japanese Remix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Virtualboxの仮想環境設定&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;メインメモリー : 8192 [MB]&lt;/li&gt;
&lt;li&gt;ストレージ : 64 [GB]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ubuntuインストール後に、zsh環境と日本語リポジトリへの変更を行った (&lt;a href="https://qiita.com/fkshom/items/53de3a9b9278cd524099"&gt;参考URL&lt;/a&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo sed -i.bak -e &lt;span class="s2"&gt;&amp;quot;s%http://jp.archive.ubuntu.com/ubuntu/%http://ftp.iij.ad.jp/pub/linux/ubuntu/archive/%g&amp;quot;&lt;/span&gt; /etc/apt/sources.list
$ sudo apt update
$ sudo apt upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;zsh環境は&lt;a href="https://github.com/skwp/dotfiles"&gt;yadr&lt;/a&gt;を使用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install -y zsh vim git curl rake
$ sh -c &lt;span class="s2"&gt;&amp;quot;`curl -fsSL https://raw.githubusercontent.com/skwp/dotfiles/master/install.sh `&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2. JeVois開発パッケージのインストール&lt;/h2&gt;
&lt;p&gt;jevoisの開発環境に必要なパッケージは以下の通り。詳細な使用方法は次の記事で検証する。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jevois-opencv&lt;/strong&gt;: Jevois本体で使用されているOpenCVに合わせて設定された、ホストコンピュータ(Ubuntu)ようにコンパイル済みのOpenCV(4.0.0)。このパッケージは&lt;code&gt;/usr/share/jevois-opencv-4.0.0&lt;/code&gt;にインストールされ、すでにインストールされている他のOpenCVを必要とするパッケージには干渉しない(らしい)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevois-host&lt;/strong&gt;: JeVoisをホストマシンで実行するためのコアソフトウェア&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevois-platform&lt;/strong&gt;:  JeVoisのクロスコンパイルのためのコアソフトウェア。UbuntuでコンパイルしてJeVois本体で動かすバイナリーを生成する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevoisbase-host&lt;/strong&gt;: JeVoisのコンパイル済みベースモジュール。ホストマシンで動かすための関数群が定義されている&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevoisbase-platform&lt;/strong&gt;: JeVoisのコンパイル済みベースモジュール。こちらはJeVois本体で動かすためにクロスコンパイル時に使用される&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevois-sdk&lt;/strong&gt;: ブートローダー/ルートファイルシステム/その他設定ファイル。JeVois本体のSDカードに配置される？(詳細はまだ確認できていない)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevois-sdk-dev&lt;/strong&gt;: JeVois本体開発のための、クロスコンパイラーやコンパイルのためのライブラリ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、公式のGitHubリポジトリには以下のパッケージが配布されている。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jevois:&lt;/strong&gt; C++17のコアソフトウェア&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevoisbase:&lt;/strong&gt; マシンビジョンに使用されるJeVois専用モジュールが25個以上ある。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;samplemodule:&lt;/strong&gt; JeVoisのサンプルモジュール。新しいモジュールを作成するときにテンプレートとして使用する。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;samplepythonmodule:&lt;/strong&gt; samplemoduleのPython版。こちらも新しいモジュールの作成時にテンプレートとして使用される。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;jevois-sdk&lt;/strong&gt;: JeVoisのカメラに挿入されているSDカードへデータを送信するための、LinuxカーネルとOSのフレームワーク。これを直接いじることは滅多になさそう&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストール手順はGitHubのjevoisリポジトリに&lt;code&gt;INSTALL&lt;/code&gt;というファイルがあったので、こちらを参考にした。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/jevois/jevois/blob/master/INSTALL"&gt;https://github.com/jevois/jevois/blob/master/INSTALL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ファイルには上記で説明したようなことが長々と記載されている。インストール手順を簡単にまとめる。&lt;/p&gt;
&lt;h3&gt;2.1. JeVoisの配布リポジトリを登録する&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DD24C027
$ sudo add-apt-repository &lt;span class="s2"&gt;&amp;quot;deb http://jevois.usc.edu/apt bionic main&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;INSTALLには&lt;code&gt;bionic&lt;/code&gt;の代わりに&lt;code&gt;xenial&lt;/code&gt;と記載されているので注意。ホストマシンはUbuntu18.04なのでbionicと書き換えた。&lt;/p&gt;
&lt;p&gt;リポジトリを登録できれば、あとはパッケージリストのアップデートを行う。公式ではupgradeもしろと書いてあるので、念のため実行する。(たぶんあまり意味が無いような気がする)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update
$ sudo apt upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;2.2. JeVoisの開発パッケージをインストールする&lt;/h3&gt;
&lt;p&gt;パッケージは先述の通り、jevois-hostやjevois-platformなどいろいろあるが、C++の開発とmicroSDへのフラッシュなど一通りやりたい場合は、&lt;code&gt;jevois-sdk-dev&lt;/code&gt;をインストールするらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install jevois-sdk-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;自分の環境では、依存パッケージがインストールできないとエラーがでたので、依存解決してインストールするようにコマンドを実行した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt install --fix-missing
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Virtualboxを使用しているせいか、ネットワーク環境が悪いことでインストールに6時間もかかった。これにより、以下のパッケージがインストールされる&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;jevois-opencv&lt;/li&gt;
&lt;li&gt;jevois-host&lt;/li&gt;
&lt;li&gt;jevois-platform&lt;/li&gt;
&lt;li&gt;jevoisbase-host&lt;/li&gt;
&lt;li&gt;jevoisbase-platform&lt;/li&gt;
&lt;li&gt;jevois-sdk&lt;/li&gt;
&lt;li&gt;jevois-sdk-dev&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本章冒頭で解説したパッケージが一通りインストールされた。&lt;code&gt;INSTALL&lt;/code&gt;には、132行目まで他のパターンでのインストール内容(Webカメラだけで開発したい場合など)が記載されているが、どれも上のパッケージリストの内包なので、特に確認は不要だと判断した。&lt;/p&gt;
&lt;h2&gt;3. jevois-daemon&lt;/h2&gt;
&lt;p&gt;インストールが完了したら、JeVois本体をホストマシンにUSB接続し、Virtualboxの「デバイス &amp;gt; USB &amp;gt; JeVois Inc. JeVois-A33 Smart Camera [0100]」を選択し、ホストからUbuntu仮想環境にマッピングしておく。また、Webカメラも仮想環境にマッピングする「デバイス &amp;gt; Webカメラ &amp;gt; HD Webcam」。&lt;/p&gt;
&lt;p&gt;&lt;img alt="20200106_screenshot1.png" src="images/20200106_screenshot2.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="20200106_screenshot1.png" src="images/20200106_screenshot3.png"&gt;&lt;/p&gt;
&lt;p&gt;そのあと、jevois-hostとjevoisbase-hostに含まれる&lt;code&gt;jevois-daemon&lt;/code&gt;を実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jevois-daemon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jevois-daemonはホストコンピュータのWebカメラにアクセスし、様々なコマンドを受け付ける。例えば、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;help&lt;/li&gt;
&lt;li&gt;listmappings&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;などがある。jevois-daemonを実行した状態で、下記のようにサンプルコマンドを実行してみた&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; info
INFO: JeVois &lt;span class="m"&gt;1&lt;/span&gt;.14.0
INFO: Linux version &lt;span class="m"&gt;5&lt;/span&gt;.0.0-37-generic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コマンドを入力してから、そこそこ時間(30秒くらい)がかかってからレスポンスが標準出力された。最初はコマンドを受け付けてくれていないと感じたが、時間がかかっているだけのようだ。&lt;/p&gt;
&lt;p&gt;jevois-daemonを終了するには、quitコマンドを実行する。&lt;code&gt;Ctrl-C&lt;/code&gt;では終了できない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; quit
Quit &lt;span class="nb"&gt;command&lt;/span&gt; received - bye-bye!
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4. HelloJeVoisプログラムの実行&lt;/h2&gt;
&lt;p&gt;参考 : &lt;a href="http://jevois.org/tutorials/ProgrammerHello.html"&gt;Hello JeVois&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;4.1. HelloJeVoisモジュールの作成とビルド&lt;/h3&gt;
&lt;p&gt;ホームディレクトリに戻り、HelloJeVoisという名前で新しいJeVoisのモジュールを作成する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;
$ jevois-create-module Tutorial HelloJeVois
Create module &lt;span class="o"&gt;[&lt;/span&gt;HelloJeVois&lt;span class="o"&gt;]&lt;/span&gt; from vendor &lt;span class="o"&gt;[&lt;/span&gt;Tutorial&lt;span class="o"&gt;]&lt;/span&gt; in new directory &lt;span class="o"&gt;[&lt;/span&gt;hellojevois&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;? y
*** Cloning from samplemodule github...
Cloning int &lt;span class="s1"&gt;&amp;#39;samplemodule&amp;#39;&lt;/span&gt;...
&lt;span class="o"&gt;[&lt;/span&gt;以下略&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみに&lt;code&gt;jevois-create-module&lt;/code&gt;のヘルプを確認すると、ベンダー名とモジュール名を引数で指定するだけのコマンドであることが分かる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jevois-create-module --help
USAGE: jevois-create-module &amp;lt;VendorName&amp;gt; &amp;lt;ModuleName&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;jevois-create-moduleを実行すると、ホームディレクトリに&lt;code&gt;hellojevois&lt;/code&gt;という名前のディレクトリが作成された。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tree hellojevois
hellojevois/
├── CMakeLists.txt
├── COPYING
├── INSTALL
├── README
├── rebuild-host.sh
├── rebuild-platform.sh
└── src
    └── Modules
        └── HelloJeVois
            ├── HelloJeVois.C
            ├── icon.png
            ├── postinstall
            └── screenshot1.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;hellojevois/src/Modules/HelloJeVois.C&lt;/strong&gt;がどうやらメインで書き換えるCのモジュールファイルになるらしい。ディレクトリ直下にはビルド用のシェルスクリプトが2種類あって、&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rebuild-host.sh&lt;/code&gt; : ホスト環境のWebカメラでモジュールを実行する (デバッグ用？)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rebult-platform.sh&lt;/code&gt; : JeVois本体で実行できるように、クロスコンパイルしてバイナリを生成する&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;をそれぞれ使用する。&lt;/p&gt;
&lt;p&gt;クロスコンパイルはたいてい時間がかかるため、まずはホスト環境でデバッグ用に実行するためにビルドを実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; hellojevois/
$ ./rebuild-host.sh
-- JeVois version &lt;span class="m"&gt;1&lt;/span&gt;.14.0
-- JEVOIS_PLATFORM: OFF
-- JEVOIS_VENDOR: Tutorial
&lt;span class="o"&gt;[&lt;/span&gt;以下略&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行すると、CMakeが動いてコンパイルが完了する。コンパイルが完了すると、ビルドされたsoファイルが&lt;strong&gt;/jevois/modules/Tutorial/HelloJeVois/&lt;/strong&gt;に自動的に配置される。どうやらホストマシンで実行するビルド済みモジュールは。&lt;strong&gt;/jevois/modules&lt;/strong&gt;ディレクトリにすべてまとめて配置されるようだ。&lt;/p&gt;
&lt;p&gt;ちなみにCMakeで生成されたmakeファイルは&lt;code&gt;hbuild&lt;/code&gt;という新しくできたディレクトリ以下に作成されているため、再度コンパイルする場合は以下のようにコマンドを実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; hbuild
$ make
$ sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;make installで、再度&lt;strong&gt;/jevois/modules/Tutorial/HelloJeVois/&lt;/strong&gt;にビルド済みファイルが展開される。&lt;/p&gt;
&lt;h3&gt;4.2. ホストマシンのWebカメラでHelloJeVoisモジュールの実行&lt;/h3&gt;
&lt;p&gt;カメラの読み取り解像度や、出力解像度などの&lt;em&gt;ビデオマッピング&lt;/em&gt;情報は、&lt;strong&gt;/jevois/config/videomappings.cfg&lt;/strong&gt;に記載する必要がある。コンフィグファイルを参考に、マッピング情報の列を追加した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;$ echo &amp;quot;YUYV 640 480 28.5 YUYV 640 480 28.5 Tutorial HelloJeVois&amp;quot; | sudo tee -a /jevois/config/videomappings.cfg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;videomappings.cfgの末尾に設定が追加された。ちなみに設定のフォーマットと各パラメータは以下のようになる。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;USBmode&gt; &amp;lt;USBwidth&gt; &amp;lt;USBheight&gt; &amp;lt;USBfps&gt; &amp;lt;CAMmode&gt; &amp;lt;CAMwidth&gt; &amp;lt;CAMheight&gt; &amp;lt;CAMfps&gt; &amp;lt;Vendor&gt; &amp;lt;Module&gt; [*]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;USB_ : JeVoisで処理した画像をUSBシリアル経由で送信する際の設定&lt;/li&gt;
&lt;li&gt;CAM_ : JeVoisやWebカメラで読み込む画像の設定&lt;/li&gt;
&lt;li&gt;mode : YUYVやRGB565など、画像のピクセルフォーマット。USBのみMotionJpeg(MJPG)などが設定できる。&lt;/li&gt;
&lt;li&gt;width, height : 画像の縦横ピクセル数&lt;/li&gt;
&lt;li&gt;fpg : 処理最大速度 [/s]。画像サイズが小さい場合は60fpsくらいまで設定できるが、1280x1280など大きいピクセルの場合は15fpsくらいまでしか設定できない。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;補足で、JeVoisのバージョンが1.14.0以上の場合は&lt;code&gt;jevois-add-videomapping&lt;/code&gt;から設定を追加することが出来る&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo jevois-add-videomapping YUYV &lt;span class="m"&gt;640&lt;/span&gt; &lt;span class="m"&gt;480&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;.5 YUYV &lt;span class="m"&gt;640&lt;/span&gt; &lt;span class="m"&gt;480&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;.5 Tutorial HelloJeVois
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;少し冗長な話になったが、追加したモジュールを実行してみる。実行にはjevois-daemonを使用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jevois-daemon
&amp;gt; listmappings
...
    &lt;span class="m"&gt;22&lt;/span&gt; - OUT : YUYV 640x480 @ &lt;span class="m"&gt;28&lt;/span&gt;.5fps CAM: YUYV 640x480 @ &lt;span class="m"&gt;28&lt;/span&gt;.5fps MOD: Tutorial:HelloJeVois 
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;listmappingコマンドを実行すると、先ほど設定したマッピング情報が表示され、先頭にIDのような数値が付記されている。このIDを使用して、再度jevois-daemonをキーワード引数付きで実行する。また、UbuntuにはWebカメラとJeVoisがカメラとして認識されているため、Webカメラのデバイスファイルを指定する必要がある。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; quit
Quit &lt;span class="nb"&gt;command&lt;/span&gt; received - bye-bye!

$ v4l2-ctl --list-devices
VirtualBox Webcam - HD Webcam &lt;span class="o"&gt;(&lt;/span&gt;usb-0000:00:06.0-3&lt;span class="o"&gt;)&lt;/span&gt;
        /dev/video0
        /dev/video1
JeVois-A33 Smart Camera: JeVois &lt;span class="o"&gt;(&lt;/span&gt;usb-0000:00:0b.0-1&lt;span class="o"&gt;)&lt;/span&gt;
        /dev/video2
        /dev/video3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;v4l2-ctl&lt;/code&gt;コマンドでカメラのデバイスファイルを確認すると、Webカメラは&lt;code&gt;/dev/video0&lt;/code&gt;がデバイスファイルであることが分かった。jevois-daemonコマンドにデバイスファイルを指定して実行してみる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jevois-daemon --videomapping&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt; --cameradev&lt;span class="o"&gt;=&lt;/span&gt;/dev/video0
INF Engine::onParamChange: Using &lt;span class="o"&gt;[&lt;/span&gt;stdio&lt;span class="o"&gt;]&lt;/span&gt; hardware &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;-pin connector&lt;span class="o"&gt;)&lt;/span&gt; serial port
INF Engine::onParamChange: No USB serial port used
ERR VideoMapping::videoMappingsFromStream: In file /jevois/config/videomappings.cfg:106: Camera video format not supported by sensor -- SKIPPING.
...
INF Engine::postInit: Loaded &lt;span class="m"&gt;61&lt;/span&gt; vision processing modes.
INF Engine::postInit: Initalizing Python...
INF Engine::postInit: Starting camera device /dev/video4
INF Camera::Camera: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; V4L2 camera /dev/video4 card VirtualBox Webcam - HD Webcam:  bus usb-0000:00:06.0-2
INF Engine::postInit: Using display &lt;span class="k"&gt;for&lt;/span&gt; video output
INF Engine::setFormatInternal: OUT: YUYV 640x480 @ &lt;span class="m"&gt;28&lt;/span&gt;.5fps CAM: YUYV 640x480 @ &lt;span class="m"&gt;28&lt;/span&gt;.5fps MOD: Tutorial:HelloJeVois C++

&lt;span class="c1"&gt;# ↓カメラのピクセルフォーマットがMJPGに設定されている&lt;/span&gt;
INF Camera::setFormat: Camera &lt;span class="nb"&gt;set&lt;/span&gt; video format to 640x480 MJPG
FTL Camera::setFormat: Camera did not accept the requested video format as specified
ERR Log::warnAndIgnoreException: Caught std::exception &lt;span class="o"&gt;[&lt;/span&gt;FTL Camera::setFormat: Camera did not accept the requested video format as specified&lt;span class="o"&gt;]&lt;/span&gt;
INF Camera::streamOn: &lt;span class="m"&gt;5&lt;/span&gt; buffers of &lt;span class="m"&gt;1228800&lt;/span&gt; bytes allocated
INF READY JEVOIS &lt;span class="m"&gt;1&lt;/span&gt;.14.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;実行していくら待っても何も表示されないのでログを確認してみると、カメラのピクセルフォーマットにMJPGを設定したと出ている。再度&lt;code&gt;v4l2-ctl&lt;/code&gt;コマンドでwebカメラのピクセルフォーマットを調べてみた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ v4l2-ctl -f video4linux2 -d /dev/video0 --list-formats
ioctl: VIDIOC_ENUM_FMT
    Index       : &lt;span class="m"&gt;0&lt;/span&gt;
    Type        : Video Capture
    Pixel Format: &lt;span class="s1"&gt;&amp;#39;MJPG&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;compressed&lt;span class="o"&gt;)&lt;/span&gt;
    Name        : Motion-JPEG
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;どうやら自分のホストマシンに搭載されているWebカメラでは、YUYVに対応していないみたいだ。ビデオマッピングでカメラのピクセルフォーマットにMotion-JPEGを設定できないので、別のWebカメラをつないで実行してみると、YUYVのピクセルフォーマットに対応していた。&lt;/p&gt;
&lt;p&gt;&lt;img alt="20200106_screenshot1.png" src="images/20200106_screenshot1.png"&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ v4l2-ctl --list-devices
USB_Camera: USB_Camera &lt;span class="o"&gt;(&lt;/span&gt;usb-0000:00:0b.0-1&lt;span class="o"&gt;)&lt;/span&gt;:
    /dev/video0
    /dev/video1

JeVois-A33 Smart Camera: JeVois &lt;span class="o"&gt;(&lt;/span&gt;usb-0000:00:0b.0-2&lt;span class="o"&gt;)&lt;/span&gt;:
    /dev/video2
    /dev/video3

$ v4l2-ctl -f video4linux2 -d /dev/video0 --list-formats
ioctl: VIDIOC_ENUM_FMT
    Index       : &lt;span class="m"&gt;0&lt;/span&gt;
    Type        : Video Capture
    Pixel Format: &lt;span class="s1"&gt;&amp;#39;YUYV&amp;#39;&lt;/span&gt;
    Name        : YUYV &lt;span class="m"&gt;4&lt;/span&gt;:2:2

    Index       : &lt;span class="m"&gt;1&lt;/span&gt;
    Type        : Video Capture
    Pixel Format: &lt;span class="s1"&gt;&amp;#39;MJPG&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;compressed&lt;span class="o"&gt;)&lt;/span&gt;
    Name        : Motion-JPEG
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再度jevois-daemonでUSBカメラに変更して実行する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jevois-daemon --videomapping&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;22&lt;/span&gt; --cameradev&lt;span class="o"&gt;=&lt;/span&gt;/dev/video0
...
INF Engine::postInit: Loaded &lt;span class="m"&gt;61&lt;/span&gt; vision processing modes.
INF Engine::postInit: Initalizing Python...
INF Engine::postInit: Starting camera device /dev/video0
INF Camera::Camera: &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; V4L2 camera /dev/video0 card USB_Camera: USB_Camera bus usb-0000:00:0b.0-1
INF Engine::postInit: Using display &lt;span class="k"&gt;for&lt;/span&gt; video output
INF Engine::setFormatInternal: OUT: YUYV 640x480 @ &lt;span class="m"&gt;28&lt;/span&gt;.5fps CAM: YUYV 640x480 @ &lt;span class="m"&gt;28&lt;/span&gt;.5fps MOD: Tutorial:HelloJeVois C++

&lt;span class="c1"&gt;# ↓YUYVで設定できた&lt;/span&gt;
INF Camera::setFormat: Camera &lt;span class="nb"&gt;set&lt;/span&gt; video format to 640x480 YUYV
INF Engine::setFormatInternal: Instantiating dynamic loader &lt;span class="k"&gt;for&lt;/span&gt; /jevois/modules/Tutorial/HelloJeVois/HelloJeVois.so
INF Engine::setFormatInternal: Module &lt;span class="o"&gt;[&lt;/span&gt;HelloJeVois&lt;span class="o"&gt;]&lt;/span&gt; loaded, initialized, and ready.
INF Camera::streamOn: &lt;span class="m"&gt;5&lt;/span&gt; buffers of &lt;span class="m"&gt;614400&lt;/span&gt; bytes allocated
INF READY JEVOIS &lt;span class="m"&gt;1&lt;/span&gt;.14.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;今度はカメラのピクセルフォーマットがYUYVに変更できた。再度&lt;code&gt;jevois-daemon&lt;/code&gt;を立ち上げると、今度は無事カメラウィンドウが立ち上がって、「Hello JeVois」と文字の描画処理がされた動画が表示された。&lt;/p&gt;
&lt;p&gt;&lt;img alt="20200106_screenshot4.png" src="images/20200106_screenshot4.png"&gt;&lt;/p&gt;
&lt;h3&gt;4.3. JeVoisでHelloJeVoisモジュールを実行する&lt;/h3&gt;
&lt;p&gt;ホストマシンの代わりに、JeVois本体にHelloJeVoisモジュールをクロスコンパイルでビルドする。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./rebuild-platform.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ビルドが完了すると、&lt;code&gt;`pbuild&lt;/code&gt;と&lt;code&gt;jvpkg&lt;/code&gt;というディレクトリが作成される。モジュールを修正して再度ビルドしたい場合は、&lt;code&gt;pbuild&lt;/code&gt;ディレクトリに入ってmakeコマンドを実行すると、コンパイルされたファイルが&lt;code&gt;jvpkg&lt;/code&gt;に作成される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; pbuild
$ make
$ make install
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;33&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt; Generating ../src/Modules/HelloJeVois/modinfo.yaml, ../src/Modules/HelloJeVois/modinfo.html
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;33&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt; Built target modinfo_HelloJeVois
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;%&lt;span class="o"&gt;]&lt;/span&gt; Built target HelloJeVois
Install the project...
-- Install configuration: &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
Cannot access /dev/ttyACM0 -- is JeVois plugged in? -- ABORT
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;make installで、jvpkgディレクトリにビルドされたパッケージが作成され、USB経由でJeVoisのSDカードにコピーされる。しかし、&lt;code&gt;/dev/ttyACM0&lt;/code&gt;にアクセスできないとエラーが表示された。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ dmesg &lt;span class="p"&gt;|&lt;/span&gt; grep ttyACM0
&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;4339&lt;/span&gt;.396412&lt;span class="o"&gt;]&lt;/span&gt; cdc_acm &lt;span class="m"&gt;1&lt;/span&gt;-1:1.2: ttyACM0: USB ACM device
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;どうやらデバイスファイルへのアクセス権限がないようなので、下記を参考にパーミッションを調整する。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jevois.org/doc/USBserialLinux.html"&gt;Connecting to JeVois using serial-over-USB: Linux host&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;まずは、Ubuntuではデフォルトで、modelmanagerがJeVoisに立ち上がる前からメッセージを送りまくっているため、modemmanagerを削除する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt purge modemmanage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に、自身のユーザーを&lt;code&gt;dialout&lt;/code&gt;グループに追加する。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo usermod -aG dialout &lt;span class="nv"&gt;$USER&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;続けてpbuildディレクトリで下記のコマンドを実行すると、jvpkgにあるビルド済みファイルをJeVoisのSDカードにコピーしてくれる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; pbuild
$ make jvpkg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、rebuild-platform.shをmicrosdオプション付きで実行すると、クロスコンパイルとJeVoisのSDカードにコピーするタスクをまとめてやってくれるらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./rebuild-platform.sh --microsd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;公式ドキュメントには、ビルドした際に.jvpkgファイルが出来るので、それを/media/&amp;lt;username&gt;/JEVOIS/packagesディレクトリにコピーしろと書いてあるが、そもそも/media/&amp;lt;username&gt;/JEVOIS以下にpackageディレクトリが存在していない。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls /media/ktakeuchi/JEVOIS
modules  share
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;そこで、自分でpackageディレクトリを作成し、その後.jvpkgファイルをコピーした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mkdir -p /media/ktakeuchi/JEVOIS/packages
$ tree -L &lt;span class="m"&gt;1&lt;/span&gt;
.
├── --help
├── CMakeLists.txt
├── COPYING
├── INSTALL
├── README
├── Tutorial_hellojevois.jvpkg &lt;span class="c1"&gt;# .jvpkgファイルが出来ている&lt;/span&gt;
├── hbuild
├── &lt;span class="nb"&gt;help&lt;/span&gt;
├── jvpkg
├── pbuild
├── rebuild-host.sh
├── rebuild-platform.sh
├── share
└── src
$ sudo cp Tutorial_hellojevois.pkg /media/ktakeuchi/JEVOIS/packages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;その後、&lt;code&gt;jevois-usbsd&lt;/code&gt;コマンドでSDカードをUSB経由でマウントし、同じコマンドでアンマウントしたら、JeVois本体が自動的に再起動されて、自作のモジュールが起動するようになるらしい。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jevois-usbsd start
$ jevois-usbsd stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再起動後、数秒待ってからguvcviewを立ち上げ、USB経由で送られてくる動画像を確認した&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ guvcview -d /dev/video2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;その結果、見事JeVois本体でプログラムが動いていることが確認できました！&lt;/p&gt;
&lt;p&gt;&lt;img alt="20200106_screenshot5.png" src="images/20200106_screenshot5.png"&gt;&lt;/p&gt;</content><category term="AI, 画像処理"></category><category term="エッジコンピューティング"></category><category term="画像処理"></category><category term="JeVois"></category></entry></feed>